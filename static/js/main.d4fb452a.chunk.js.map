{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","AppFunctionComponent.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","id","src","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","props","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLocaleLowerCase","includes","event","target","value","console","log","Component","useState","setMonsters","setSearchField","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","AppFunctionComponent","document","getElementById"],"mappings":"sTAiBeA,G,YAbF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,mBAAcF,EAAQG,IACzBC,IAAG,+BAA0BJ,EAAQG,GAAlC,4BAEL,6BAAKH,EAAQK,OACb,4BAAIL,EAAQM,UANuBN,EAAQG,MCUlCI,EAVE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,qBAAKP,UAAU,YAAf,SACGO,EAASC,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAMA,QAASA,UCKRU,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,uBACEX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCHKG,G,uDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXT,SAAU,GACVU,YAAa,IALE,E,gEASE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEhB,SAAUe,S,+BAGrC,IAAD,SAC2BE,KAAKR,MAA/BT,EADD,EACCA,SAAUU,EADX,EACWA,YACZQ,EAAmBlB,EAASmB,QAAO,SAAC3B,GAAD,OACvCA,EAAQK,KAAKuB,oBAAoBC,SAASX,EAAYU,wBAExD,OACE,sBAAK3B,UAAU,MAAf,UACE,wEACA,cAAC,EAAD,CACEU,YAAY,kBACZC,aAAc,SAACkB,GACb,EAAKN,SAAS,CAAEN,YAAaY,EAAMC,OAAOC,QAAS,WACjDC,QAAQC,IAAIhB,SAIlB,cAAC,EAAD,CAAUV,SAAUkB,W,GAhCKS,c,OCoClBpB,EApCH,WAAO,IAAD,EACgBqB,mBAAS,IADzB,mBACT5B,EADS,KACC6B,EADD,OAEsBD,mBAAS,IAF/B,mBAETlB,EAFS,KAEIoB,EAFJ,KAOhBC,qBAAU,WACRpB,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWc,GAAY,kBAAMd,UACpC,IAKHgB,qBAAU,WACRN,QAAQC,IAAIhB,MAGd,IAAMQ,EAAmBlB,EAASmB,QAAO,SAAC3B,GAAD,OACvCA,EAAQK,KAAKuB,oBAAoBC,SAASX,EAAYU,wBAGxD,OACE,sBAAK3B,UAAU,MAAf,UACE,yEACA,cAAC,EAAD,CACEU,YAAY,kBACZC,aAAc,SAACkB,GAAD,OAAWQ,GAAe,kBAAMR,EAAMC,OAAOC,YAE7D,cAAC,EAAD,CAAUxB,SAAUkB,QC1BXc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,uBACA,cAACC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d4fb452a.chunk.js","sourcesContent":["import React from \"react\"\n\nimport \"./card.styles.css\"\n\nconst Card = ({ monster }) => {\n  return (\n    <div className=\"card-container\" key={monster.id}>\n      <img\n        alt={`Monster #${monster.id}`}\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  )\n}\n\nexport default Card\n","import React from \"react\"\n\nimport \"./card-list.styles.css\"\n\nimport Card from \"../card/card.component\"\n\nconst CardList = ({ monsters }) => {\n  return (\n    <div className=\"card-list\">\n      {monsters.map((monster) => (\n        <Card monster={monster}></Card>\n      ))}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from \"react\"\r\n\r\nimport \"./search-box.styles.css\"\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React, { Component } from \"react\"\n\nimport CardList from \"./components/card-list/card-list.component.jsx\"\nimport SearchBox from \"./components/search-box/search-box.component.jsx\"\n\nimport \"./App.css\"\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }))\n  }\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Class Component App with this.setState</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={(event) => {\n            this.setState({ searchField: event.target.value }, () => {\n              console.log(searchField)\n            })\n          }}\n        ></SearchBox>\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    )\n  }\n}\n","import React, { useState, useEffect } from \"react\"\n\nimport CardList from \"./components/card-list/card-list.component.jsx\"\nimport SearchBox from \"./components/search-box/search-box.component.jsx\"\n\nimport \"./App.css\"\n\nconst App = () => {\n  const [monsters, setMonsters] = useState([])\n  const [searchField, setSearchField] = useState(\"\")\n\n  // The empty array as a second argument makes useEffect\n  // run only one time, when the page loads, equivalent\n  // to the componentDidMount() lifecycle method.\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => setMonsters(() => users))\n  }, [])\n\n  // Runs every time the component re-renders, creating\n  // an effect similar to passing in a callback function\n  // as the second argument to this.setState() in a class.\n  useEffect(() => {\n    console.log(searchField)\n  })\n\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n  )\n\n  return (\n    <div className=\"App\">\n      <h1>Function Component App with React Hooks</h1>\n      <SearchBox\n        placeholder=\"search monsters\"\n        handleChange={(event) => setSearchField(() => event.target.value)}\n      ></SearchBox>\n      <CardList monsters={filteredMonsters}></CardList>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport AppFunctionComponent from \"./AppFunctionComponent\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <hr />\n    <AppFunctionComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}